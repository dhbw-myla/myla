%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%	Docker		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@online{MS-DockerInc..05.03.2019,
	abstract = {A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. Learn more.},
	author = {{Docker Inc.}},
	editor = {{Docker Inc.}},
	year = {2020},
	title = {What is a Container? | Docker},
	url = {https://www.docker.com/resources/what-container},
	keywords = {docker container},
	urldate = {2020-06-01}
}

@online{MS-MicrosoftCorporation.31.08.2018,
	abstract = {.NET-Microservicesarchitektur f{\"u}r .NET-Containeranwendungen | Was ist Docker?},
	author = {{Microsoft Corporation}},
	editor = {{Microsoft Corporation}},
	year = {2018},
	title = {Was ist Docker?},
	url = {https://docs.microsoft.com/de-de/dotnet/standard/microservices-architecture/container-docker-introduction/docker-defined},
	address = {microsoft.com},
	urldate = {2020-06-01}
}

@online{MS-ChrissiKraus.27.07.2018,
	abstract = {Docker legt Programme samt ihrer Abh{\"a}ngigkeiten in Images ab. Diese bilden die Basis f{\"u}r virtualisierte Container, die auf nahezu jedem Betriebssystem lauff{\"a}hig sind. So werden Anwendungen portabel und unkompliziert, sei es w{\"a}hrend der Entwicklung oder beim Skalieren von SaaS-Clustern.},
	author = {{Chrissi Kraus}, Stephan Augsten},
	year = {2018},
	title = {Was ist Docker?},
	url = {https://www.dev-insider.de/was-ist-docker-a-733683/},
	urldate = {2020-06-01}
}

@online{MS-ReneBust.06.04.2010,
	abstract = {Der Begriff Hypervisor setzt sich aus den griechischen Worten Hyper (deutsch: {\"u}ber) und Visor (lateinisch videre, deutsch: sehen) zusammen. Er wird auch als Virtual Machine Manager bezeichnet, der Ha},
	author = {{Rene B{\"u}st}},
	year = {2010},
	title = {Was ist ein Hypervisor?},
	url = {https://www.crisp-research.com/was-ist-ein-hypervisor/},
	keywords = {Citrix XenServer;clouduser;Crisp;Crisp Research;ein;Grundlagen;Hypervisor;Hypervisor?;IBM POWER Hypervisor (PowerVM);IBM System z Hypervisor (PR/SM);ist;Microsoft Hyper-V;Oracle VM Server;Parallels Server;Research;typ 1 hypervisor;typ 2 hypervisor;Uncategorized;VMware ESX Server;Was;Was ist ein Hypervisor?;Xen},
	urldate = {2020-06-01}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	Prototyping 	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{MS-Floyd.1984,
	abstract = {This paper originates from a series of discussions between programme committee members during the preparation of the Working Conference on Prototyping. While trying to define the topic of the conference, it became clear to us that we each held our own viewpoint on the subject. Views differed as to the specific use of terminology as well as the application-oriented emphasis on particular strategies, and so did our judgements about the potential usefulness of prototyping. The views did not, however, seem contradictory but rather complementary.},
	author = {Floyd, Christiane},
	title = {A Systematic Look at Prototyping},
	pages = {1--18},
	publisher = {{Springer Berlin Heidelberg}},
	isbn = {978-3-642-69796-8},
	editor = {Budde, Reinhard and Kuhlenkamp, Karin and Mathiassen, Lars and Z{\"u}llighoven, Heinz},
	booktitle = {Approaches to Prototyping},
	year = {1984},
	address = {Berlin, Heidelberg}
}

@book{MS-Alpar.2019,
	author = {Alpar, Paul and Alt, Rainer and Bensberg, Frank},
	year = {2019},
	title = {Anwendungsorientierte Wirtschaftsinformatik: Strategische Planung, Entwicklung und Nutzung von Informationssystemen},
	edition = {9th ed. 2019},
	isbn = {978-3-6582-5581-7},
	doi = {10.1007/978-3-658-25581-7}
}

@misc{MS-Kuhrmann.26.09.2012,
	author = {Dr. Kuhrmann, Marco},
	editor = {{Universit{\"a}t Potsdam}},
	year = {2012},
	title = {Prototyping --- Enzyklopaedie der Wirtschaftsinformatik},
	url = {https://www.enzyklopaedie-der-wirtschaftsinformatik.de/lexikon/is-management/Systementwicklung/Vorgehensmodell/Prototyping},
	urldate = {2020-06-01}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	Microservices	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@book{MS-Sharma.2016,
	abstract = {Sourabh Sharma's 'Mastering Microservices with Java' allows readers to master the art of implementing microservices in the production environment with ease.},
	author = {Sharma, Sourabh},
	year = {2016},
	title = {Mastering microservices with Java},
	address = {Birmingham},
	publisher = {{Packt Publishing}},
	isbn = {978-1-7852-8517-2},
	file = {http://www.worldcat.org/oclc/958464829}
}

@article{MS-Wolff.02.11.2015,
	abstract = {Microservices sind gerade der Architektur-Hype schlechthin. Aber die Ideen sind schon recht alt und bew{\"a}hrt. Zeit, ein Blick in die Historie zu werfen.},
	author = {Wolff, Eberhard},
	year = {2015},
	title = {Neun Jahre Microservices},
	url = {https://www.heise.de/developer/artikel/Neun-Jahre-Microservices-2867634.html},
	keywords = {Amazon;Microservices},
	urldate = {2020-06-01},
	journal = {heise Online},
	file = {873e9ab4-b444-44c3-9a68-0006418f453d:C\:\\Users\\d070487\\AppData\\Local\\Swiss Academic Software\\Citavi 6\\ProjectCache\\uumfqdfz7fzh4vhspx4wkfnt4uoocx2pajknuvevfz7\\Citavi Attachments\\873e9ab4-b444-44c3-9a68-0006418f453d.pdf:pdf}
}

@misc{MS-Herrmann.10.02.2017,
	author = {Herrmann, Wolfgang},
	year = {2017},
	title = {Cloud-Infrastruktur-Markt w{\"a}chst 2017 um 46 Prozent - Konzentration im Public-Cloud-Markt - computerwoche.de},
	url = {https://www.computerwoche.de/a/microsoft-google-und-ibm-schnappen-sich-cloud-kunden,3329783,2},
	urldate = {2020-06-01}
}


@article{MS-Bucchiarone.2018,
	author = {Bucchiarone, Antonio and Dragoni, Nicola and Dustdar, Schahram and Larsen, Stephan T. and Mazzara, Manuel},
	year = {2018},
	title = {From Monolithic to Microservices: An Experience Report from the Banking Domain},
	pages = {50--55},
	volume = {35},
	number = {3},
	issn = {0740-7459},
	journal = {IEEE Software},
	doi = {10.1109/MS.2018.2141026},
	file = {fe9a43bf-d51b-4024-954a-ca77cf8f08ea:C\:\\Users\\d070487\\AppData\\Local\\Swiss Academic Software\\Citavi 6\\ProjectCache\\uumfqdfz7fzh4vhspx4wkfnt4uoocx2pajknuvevfz7\\Citavi Attachments\\fe9a43bf-d51b-4024-954a-ca77cf8f08ea.pdf:pdf}
}

@book{MS-Wolff.2018,
	author = {Wolff, Eberhard},
	year = {2018},
	title = {Das Microservices-Praxisbuch: Grundlagen, Konzepte und Rezepte},
	address = {Heidelberg},
	edition = {1. Auflage},
	publisher = {dpunkt.verlag},
	isbn = {978-3-8649-0526-1},
	file = {http://www.worldcat.org/oclc/1031706564}
}

@book{MS-Vogel.2009,
	author = {Vogel, Oliver and Arnold, Ingo and Chughtai, Arif},
	year = {2009},
	title = {Software-Architektur: Grundlagen --- Konzepte --- Praxis},
	url = {http://dx.doi.org/10.1007/978-3-8274-2267-5},
	edition = {2. Auflage},
	isbn = {978-3-8274-2267-5},
	file = {http://media.obvsg.at/AC06437694-4001},
	file = {http://media.obvsg.at/AC06437694-1001}
}

@misc{MS-Fowler.25.03.2014,
	author = {Fowler, Martin and Lewis, James},
	year = {2014},
	title = {Microservices},
	url = {https://martinfowler.com/articles/microservices.html},
	urldate = {2020-06-01}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%% 		REST		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@misc{MS-GoogleLLC.2020,
	author = {{Google LLC}},
	editor = {{Google LLC}},
	year = {2020},
	title = {Google APIs Explorer | Google Developers},
	url = {https://developers.google.com/apis-explorer},
	urldate = {2020-06-01}
}

@misc{MS-TwitterInc..01.03.2020,
	author = {{Twitter, Inc.}},
	year = {2020},
	title = {API reference index --- Twitter Developers},
	url = {https://developer.twitter.com/en/docs/api-reference-index},
	urldate = {2020-06-01}
}

@misc{MS-MicrosoftCorporation.21.05.2018,
	abstract = {Explore our catalog of embeddable controls and REST APIs},
	author = {{Microsoft Corporation}},
	editor = {{Microsoft Corporation}},
	year = {2018},
	title = {APIs - Web at Microsoft},
	url = {https://developer.microsoft.com/en-us/web/apis/},
	urldate = {2020-06-01}
}

@phdthesis{MS-Fielding.,
	abstract = {The World Wide Web has succeeded in large part because its software architecture has been designed to meet the needs of an Internet-scale distributed hypermedia system. The Web has been iteratively developed over the past ten years through a series of modifications to the standards that define its architecture. In order to identify those aspects of the Web that needed improvement and avoid undesirable modifications, a model for the modern Web architecture was needed to guide its design, definition, and deployment. Software architecture research investigates methods for determining how best to partition a system, how components identify and communicate with each other, how information is communicated, how elements of a system can evolve independently, and how all of the above can be described using formal and informal notations. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. An architectural style is a named, coordinated set of architectural constraints. This dissertation defines a framework for understanding software architecture via architectural styles and demonstrates how styles can be used to guide the architectural design of network-based application software. A survey of architectural styles for network-based applications is used to classify styles according to the architectural properties they induce on an architecture for distributed hypermedia. I then introduce the Representational State Transfer (REST) architectural style and describe how REST has been used to guide the design and development of the architecture for the modern Web. REST emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems. I describe the software engineering principles guiding REST and the interaction constraints chosen to retain those principles, contrasting them to the constraints of other architectural styles. Finally, I describe the lessons learned from applying REST to the design of the Hypertext Transfer Protocol and Uniform Resource Identifier standards, and from their subsequent deployment in Web client and server software.},
	author = {Fielding, Roy Thomas},
	title = {Architectural Styles and the Design of Network-based Software Architectures.},
	url = {http://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation_2up.pdf},
	address = {United States, North America},
	school = {{University of California, Irvine}},
	type = {Dissertation},
	year = {2000}
}

@book{MS-Wolff.2016,
	author = {Wolff, Eberhard},
	year = {2016},
	title = {Microservices: Grundlagen flexibler Softwarearchitekturen},
	price = {Gekl. : ca. EUR 32.90 (DE), ca. EUR 33.90 (AT), ca. sfr 44.90 (freier Pr.)},
	edition = {1. Auflage},
	isbn = {978-3-8649-0313-7},
	file = {http://media.obvsg.at/AC12612020-1001},
	file = {http://deposit.d-nb.de/cgi-bin/dokserv?id=5326678&prov=M&dok_var=1&dok_ext=htm}
}

@misc{MS-Belshe.2015,
	author = {Belshe, M. and Peon, R. and Thomson, M.},
	year = {2015},
	title = {Hypertext Transfer Protocol Version 2 (HTTP/2): RFC 7540},
	publisher = {{RFC Editor}},
	doi = {10.17487/RFC7540},
	file = {b3f0300d-d2cc-4c1e-a20e-587b2040e873:C\:\\Users\\d070487\\AppData\\Local\\Swiss Academic Software\\Citavi 6\\ProjectCache\\uumfqdfz7fzh4vhspx4wkfnt4uoocx2pajknuvevfz7\\Citavi Attachments\\b3f0300d-d2cc-4c1e-a20e-587b2040e873.pdf:pdf}
}

@misc{MS-Fielding.1999,
	author = {Fielding, R. and Gettys, J. and Mogul, J. and Frystyk, H. and Masinter, L. and Leach, P. and Berners-Lee, T.},
	year = {1999},
	title = {Hypertext Transfer Protocol -- HTTP/1.1: RFC 2616},
	publisher = {{RFC Editor}},
	doi = {10.17487/RFC2616}
}

@book{MS-Tilkov.2015,
	abstract = {Das Buch bietet eine theoretisch fundierte, vor allem aber praxistaugliche Anleitung zum professionellen Einsatz von RESTful HTTP. Es beschreibt den Architekturstil REST (Representational State Transfer) und seine Umsetzung im Rahmen der Protokolle des World Wide Web (HTTP, URIs und andere).    Es wird gezeigt, wie man klassische Webanwendungen und Webservices so entwirft, dass sie im Einklang mit den Grundprinzipien des Web stehen und seine vielen Vorteile ausnutzen.    Nach einer kurzen Einleitung, die die Grundprinzipien vermittelt (Ressourcen, Repr{\"a}sentationen, Hyperlinks, Content Negotiation), wird ein vollst{\"a}ndiges praktisches Beispiel vorgestellt. Danach werden die einzelnen Konzepte sowie fortgeschrittene Themen wie Caching, Dokumentation und Sicherheit detailliert betrachtet. Schlie{\ss}lich wird eine erweiterte Form der Beispielanwendung entwickelt, um die Umsetzung der fortgeschrittenen Konzepte zu demonstrieren. Inzwischen etablierte Best Practices zu Entwurf und Implementierung werden in einem eigenen Kapitel beschrieben und diskutiert.    Neu in der dritten Auflage ist u.a. die Behandlung von immer popul{\"a}rer werdenden Formaten (wie HAL, collection+json und Siren), Hinweise zur Dokumentation von Web-APIs sowie das Zusammenspiel mit Web-Oberfl{\"a}chen nach dem ROCA-Prinzip.  Stefan Tilkov besch{\"a}ftigt sich seit Beginn der 90er-Jahre mit Architekturans{\"a}tzen fu?r gro{\ss}e, verteilte Systemlandschaften. Von 1993 bis 1998 war er in verschiedenen Rollen bei einem mittelst{\"a}ndischen Softwarehaus t{\"a}tig, zuletzt als Leiter des Bereichs Anwendungsentwicklung, bevor er 1999 die Technologieberatung innoQ Deutschland GmbH mitgru?ndete. Als Gesch{\"a}ftsfu?hrer und Principal Consultant besch{\"a}ftigt er sich dort schwerpunktm{\"a}{\ss}ig mit leichtgewichtigen Architekturans{\"a}tzen und serviceorientierten IT-Architekturen.    Martin Eigenbrodt ist seit 2009 Mitarbeiter bei innoQ. Als Senior Consultant geh{\"o}rt sowohl die Schulung und Beratung beim Entwurf von RESTful APIs zu seinen Aufgaben, als auch deren konkrete Implementierung. Technologisch liegt sein Schwerpunkt  dabei auf Scala und Play.    Silvia Schreier besch{\"a}ftigt sich seit einigen Jahren mit REST. Zun{\"a}chst im Rahmen ihrer T{\"a}tigkeit als wissenschaftliche Mitarbeiterin an der FernUniversit{\"a}t in Hagen und seit 2013 als Consultant bei innoQ. Dort liegt ihr Schwerpunkt auf dem Entwurf und der Entwicklung REST- und ROCA-konformer Anwendungen mit verschiedensten Programmiersprachen und Persistenzl{\"o}sungen. Au{\ss}erdem versucht sie bei Veranstaltungen verschiedenster Initiativen andere Menschen fu?r die IT zu begeistern.    Oliver Wolf besch{\"a}ftigt sich seit vielen Jahren mit Software- und Systemarchitektur und interessiert sich besonders fu?r gro{\ss}e, verteilte Systeme mit hohen Anforderungen an Sicherheit, Skalierbarkeit und Flexiblit{\"a}t. Bevor er als Principal Consultant zu innoQ kam, war er unter anderem als Chefarchitekt, Technischer Produktmanager und Berater bei verschiedenen IT-Unternehmen t{\"a}tig.},
	author = {Tilkov, Stefan and Eigenbrodt, Martin and Schreier, Silvia and Wolf, Oliver},
	year = {2015},
	title = {REST und HTTP: Entwicklung und Integration nach dem Architekturstil des Web},
	url = {http://gbv.eblib.com/patron/FullRecord.aspx?p=2046366},
	address = {s.l.},
	edition = {3. Aufl.},
	publisher = {dpunkt},
	isbn = {978-3-8649-0120-1},
	file = {https://ebookcentral.proquest.com/lib/gbv/detail.action?docID=2046366},
	file = {https://external.dandelon.com/download/attachments/dandelon/ids/DE002A2FE1E8D89CFB547C1257E8F00320021.pdf}
}